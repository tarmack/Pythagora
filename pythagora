#!/usr/bin/python -OO
# -*- coding: utf-8 -*
#-------------------------------------------------------------------------------
# Copyright 2009 E. A. Graham Jr. <txcrackers@gmail.com>.
# Copyright 2010 B. Kroon <bart@tarmack.eu>.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
from PyQt4.QtCore import QTimer, SIGNAL, Qt
from PyQt4.QtGui import QApplication, QWidget, QKeySequence

import sys
import time
import thread
import mutex
import signal

import mpdthreaded as mpd
import playControls
import configuration
import MainWindow
import auxilia
import mpdlibrary

#============== Long term TODO's ==============================================
# TODO: notification on song change (http://mpd.wikia.com/wiki/Mpd_osd.py_(using_dbus)

# TODO: Refactor stuff:
#       * Method out stuff from __init_() in allot of classes.

#==============================================================================

EMPTY_SONG = mpdlibrary.Song({'pos': -1, 'file': ''}, None)

def main():
    print 'debug:', sys.argv
    if MainWindow.KDE:
        from PyKDE4.kdecore import ki18n, KCmdLineArgs, KAboutData, KCmdLineOptions
        from PyKDE4.kdeui import KApplication
        appName     = "Pythagora"
        catalog     = ""
        programName = ki18n("Pythagora")
        version     = "0.0"
        description = ki18n("KDE/Qt client for MPD (Music Player Daemon.")
        license     = KAboutData.License_Custom
        copyright   = ki18n("(c) 2010 Bart Kroon <bart@tarmack.eu>")
        text        = ki18n("none")
        homePage    = "http://www.tarmack.eu/pythagora"
        bugEmail    = "bugs.pythagora@tarmack.eu"

        aboutData = KAboutData(appName, catalog, programName, version,
                description, license, copyright, text, homePage, bugEmail)
        aboutData.setLicenseText(ki18n('Apache License, Version 2.0'))

        KCmdLineArgs.init(sys.argv, aboutData)

        options = KCmdLineOptions()
        options.add('h').add('help', ki18n('Show help about options'))
        options.add('help-qt' , ki18n('Show Qt specific options'))
        options.add('V').add('verbose' , ki18n('Make some noise'))
        options.add('d').add('debug' , ki18n('Make a lot of noise'))
        options.add('q').add('quiet' , ki18n('Don\'t print anything'))
        options.add('nokde' , ki18n('Don\'t even try to import any KDE module'))
        KCmdLineArgs.addCmdLineOptions(options)

        app = KApplication()
    else:
        app = QApplication(sys.argv)
        app.setApplicationName("Pythagora")
    app.setOrganizationName("Tarmack SW")
    app.setKeyboardInputInterval(1600)
    view = Manager(app)
    signal.signal(signal.SIGINT, view.keyboardInterrupt)
    exit = app.exec_()
    sys.exit(exit)

#===============================================================================
# Creates and links up the management display items.
#===============================================================================
class Manager():
    '''Creates and links up the management display items.'''
    oldVolume = 0
    misses = 0

    def __init__(self, app):
        self.app = app
        self.library = mpdlibrary.Library()
        self.firstConnect = True
        self.mutex = mutex.mutex()
        self.mpdclient = mpd.MPDClient()
        self.idleTimer = QTimer()
        self.idleTimer.setSingleShot(True)
        self.config = configuration.Configuration()
        self.view = MainWindow.View(self.config, self.mpdclient, self.library, app)
        self.playControls = playControls.PlayControls(self.mpdclient)
        self.update = Update(self.view, self.mpdclient, self.config, self.library, self.playControls)
        self.__connectSignals()
        self.__connectMPD()
        # Load the plugin forms.
        self.view.createPluginViews()

        # Set global shortcuts if KDE is available otherwise overload keyPressEvent.
        if MainWindow.KDE:
            from PyKDE4.kdeui import KActionCollection
            self.actionCollection = KActionCollection(self.view)
            self.setGlobalShortcuts()
        else:
            self.view.keyPressEvent = self.KeyPressEvent

    def connectTo(self, action):
        name = unicode(action.text())
        name = filter(lambda x:x != '&', name)
        if self.config.server and name == self.config.server[0] and self.mpdclient.connected():
            return
        if name == 'None (disconnect)':
            self.config.server = None
        else:
            self.config.server = [name]+self.config.knownHosts[name]
        self.__connectMPD()
        self.config.save()

    def toggleOutput(self, action):
        if action.isChecked():
            self.mpdclient.send('enableoutput', (action.outputid,))
        else:
            self.mpdclient.send('disableoutput', (action.outputid,))

    def callback(self, changes):
        '''Remember, this is executed from another thread.'''
        print 'debug: called back with "%s"' % changes
        if self.view.shuttingDown:
            print 'debug: callback aborted, application is closing down.'
            return
        if isinstance(changes, Exception):
            print 'debug: idle callback - got exception: ', changes
            self.view.emit(SIGNAL('ConnectionError()'))
        elif changes and type(changes) == list:
            self.mpdclient.send('status', callback=
                    lambda status, changes=changes: self.view.emit(SIGNAL('update'), changes, status))
        # The slots will be executed asynchronously so we use a timer to
        # schedule the next idle call after all events have been processed.
        if self.idleTimer.timerId() < 0:
            self.idleTimer.start()

    def KeyPressEvent(self, event):
        if event.modifiers() == Qt.ControlModifier:
            if event.key() == Qt.Key_MediaPlay:
                self.playControls.playPause()
            elif event.key() == Qt.Key_MediaStop:
                self.playControls.stop()
            elif event.key() == Qt.Key_MediaPrevious:
                self.playControls.back()
            elif event.key() == Qt.Key_MediaNext:
                self.playControls.forward()
            elif event.key() == Qt.Key_VolumeUp:
                self.playControls.volumeUp()
            elif event.key() == Qt.Key_VolumeDown:
                self.playControls.volumeDown()
            elif event.key() == Qt.Key_VolumeMute:
                self.playControls.toggleMute()
        else: QWidget.keyPressEvent(self.view, event)

    def setGlobalShortcuts(self):
        self.playAction = self.__setGlobalShortcut(
                "Play/Pause", "Play/pause", Qt.CTRL + Qt.Key_MediaPlay, self.playControls.playPause)
        self.stopAction = self.__setGlobalShortcut(
                "Stop", "Stop playing", Qt.CTRL + Qt.Key_MediaStop, self.playControls.stop)
        self.backAction = self.__setGlobalShortcut(
                "Back", "Play previous song", Qt.CTRL + Qt.Key_MediaPrevious, self.playControls.back)
        self.forwardAction = self.__setGlobalShortcut(
                "Forward", "Play next song", Qt.CTRL + Qt.Key_MediaNext, self.playControls.forward)
        self.volumeUpAction = self.__setGlobalShortcut(
                "Volume Up", "Volume up", Qt.CTRL + Qt.Key_VolumeUp, self.playControls.volumeUp)
        self.volumeDownAction = self.__setGlobalShortcut(
                "Volume Down", "Volume down", Qt.CTRL + Qt.Key_VolumeDown, self.playControls.volumeDown)
        self.muteAction = self.__setGlobalShortcut(
                "Mute", "Mute/unmute", Qt.CTRL + Qt.Key_VolumeMute, self.playControls.toggleMute)
        self.hideRestoreAction = self.__setGlobalShortcut(
                "Hide/Restore", "Hide or Restore the main window.", Qt.CTRL + Qt.SHIFT + Qt.Key_P, self.view.toggleHideRestore)

    def __setGlobalShortcut(self, name, helpText, keys, connectTo):
        print 'debug: Registering global shortcut for %s as %s.' % (name, str(keys))
        action = self.actionCollection.addAction(name, self.view)
        action.setHelpText(helpText)
        short = action.shortcut()
        short.setPrimary(QKeySequence(keys))
        action.setShortcut(short)
        action.setGlobalShortcut(short)
        self.view.connect(action, SIGNAL("triggered()"), connectTo)
        return action


    def __connectMPD(self, error=False):
        if self.view.shuttingDown:
            return True
        self.view.emit(SIGNAL('clearForms'))
        self.update.setProgress(0, 0)
        self.update.lastSongId = None
        server = self.config.server
        if not server:
            self.update.setSongLabel('Not connected')
            self.view.serverLabel.setText('Not connected')
            self.update.currentsong = {}
            if self.mpdclient.connected():
                self.mpdclient.disconnect()
            if self.firstConnect:
                self.config.showConfiguration(self.view, True)
        else:
            self.view.setCursor(Qt.WaitCursor)
            self.view.serverLabel.setText('Connecting to %s' % server[0])
            self.mpdclient.connect(server[1], int(server[2]), callback=
                    lambda exc: self.view.emit(SIGNAL('connectionTry'), exc))

    def __connectionTry(self, exc):
        print 'debug: tried to connect again :$'
        self.view.emit(SIGNAL('clearForms'))
        if isinstance(exc, Exception):
            self.update.setSongLabel('Could not connect to %s at %s.' % (self.config.server[0], self.config.server[1]))
            self.view.serverLabel.setText('Not connected')
            self.update.currentsong = mpdlibrary.Song({}, self.update.library)
            self.misses += 1
            self.misses = min(30, self.misses)
            self.idleTimer.start(3000*self.misses)
            if self.firstConnect:
                self.firstConnect = False
                self.config.showConfiguration(self.view, True)
        else:
            self.misses = 0
            self.errorCount = 0
            self.idleTimer.setInterval(0)
            if len(self.config.server) > 3 and self.config.server[3] != '':
                self.mpdclient.send('password', (self.config.server[3],))
            self.view.serverLabel.setText('Connected to %s' % self.config.server[0])
            self.callback(['mixer', 'options', 'player', 'playlist', 'database', 'stored_playlist'])
        self.view.setCursor(Qt.ArrowCursor)
        self.firstConnect = False

    def __libraryReload(self, mainlist):
        def reload(mainlist):
            start = time.time()
            server = self.config.server
            self.mutex.lock(self.library.reload, mainlist)
            self.mutex.unlock()
            print 'library parsing took {0:.3} seconds'.format(time.time() - start)
            if self.config.server == server:
                self.view.emit(SIGNAL('reloadLibrary'))
        thread.start_new_thread(reload, (mainlist,))

    def _error(self):
        print 'error: Lost connection to mpd server.'
        if self.config.server:
            self.__connectMPD(True)

    def __runIdle(self):
        print 'debug: requesting idle.'
        if not self.view.shuttingDown:
            if self.mpdclient.connected():
                self.mpdclient.send('idle', ([], 10), self.callback)
            else:
                self.view.emit(SIGNAL('ConnectionError()'))

    def __connectSignals(self):
        self.playControls.connectSignals(self.view)
        self.view.connect(self.view.menuConnect, SIGNAL('triggered(QAction *)'), self.connectTo)
        self.view.connect(self.view.menuOutputs, SIGNAL('triggered(QAction *)'), self.toggleOutput)

        self.view.connect(self.idleTimer, SIGNAL("timeout()"), self.__runIdle)
        self.view.connect(self.view, SIGNAL('reconnect()'), self.__connectMPD)
        self.view.connect(self.view, SIGNAL('ConnectionError()'), self._error)
        self.view.connect(self.view, SIGNAL('connectionTry'), self.__connectionTry)
        self.view.connect(self.view, SIGNAL('libraryReload'), self.__libraryReload)

    def keyboardInterrupt(self, signum, frame):
        print 'debug: KeyboardInterrupt'
        try:
            self.app.quit()
        except:
            sys.exit(1)


class Update:
    state = None
    misses = 0
    errorCount = 0
    time = 0
    lastSong = EMPTY_SONG
    dbusNotification = None
    def __init__(self, view, mpdclient, config, library, playControls):
        self.pauseIcon = auxilia.PIcon("media-playback-pause")
        self.startIcon = auxilia.PIcon("media-playback-start")
        self.view = view
        self.mpdclient = mpdclient
        self.config = config
        self.library = library
        self.playControls = playControls
        self.view.connect(self.view, SIGNAL('update'), self.update)
        self.view.connect(self.view, SIGNAL('currentSong'), self.setSongLabel)
        # Set the progress timer up.
        self.timer = QTimer()
        self.view.connect(self.timer, SIGNAL("timeout()"), self.progress)

    def update(self, changes, status):
        if not status:
            return
        self.timer.start(1000)
        for change in changes:
            try:
                getattr(self, change)(status)
            except AttributeError:
                print "error: Update received change group '{0}' which is not implemented.".format(change)

    def progress(self):
        if self.mpdclient.connected():
            try:
                if self.state == 'play':
                    if not self.lastSong.isStream:
                        self.setProgress(self.time + 1)
                    else:
                        self.setProgress(self.time + 1, 0)
            except Exception, e:
                print 'error: updateProgress error', e

    def playlist(self, status):
        self.mpdclient.send('plchanges', (self.view.currentList.playQueue.version,), callback=
                lambda plist: self.view.emit(SIGNAL('playlistChanged'), plist, status))

    def timeout(self, status):
        self.player(status)

    def player(self, status):
        if self.state != status['state']:
            self.__setPlayerState(status['state'])
        if status['state'] == 'stop':
            self.setProgress(0, 0)
            self.view.playerForm.songLabel.setBitrate(None)
            currentSong = EMPTY_SONG
        else:
            self.setProgress(*status['time'].split(':'))
            self.view.playerForm.songLabel.setBitrate(status['bitrate'])
            try:
                currentSong = self.view.currentList.playQueue[int(status['song'])]
            except IndexError:
                currentSong = mpdlibrary.Song(self.mpdclient.currentsong(), self.library)
                currentSong.iconPath = ''
        if self.lastSong != currentSong:
            self.view.emit(SIGNAL('currentSong'), currentSong)
            self.lastSong = currentSong
        if self.view.playerForm.iconPath != currentSong.iconPath:
            self.view.playerForm.setSongIcon(currentSong.iconPath)
        if hasattr(self.view.trayIcon, 'toolTipIconName'):
            if self.view.trayIcon.toolTipIconName() != currentSong.iconPath:
                self.view.trayIcon.setToolTipIconByName(currentSong.iconPath)
        # Check if volume chaged behind our back.
        self.mixer(status)

    def mixer(self, status):
        volumeStatus = int(status['volume'])
        self.playControls.currentVolume = volumeStatus
        self.view.playerForm.volume.setValue(volumeStatus)

    def options(self, status):
        self.view.currentList.repeatButton.setChecked(bool(int(status['repeat'])))
        self.view.currentList.randomButton.setChecked(bool(int(status['random'])))
        self.view.currentList.crossFade.setValue(int(status['xfade']))

    def stored_playlist(self, status):
        self.mpdclient.send('listplaylists', callback=
                lambda playlists: self.view.emit(SIGNAL('reloadPlaylists'), playlists))

    def database(self, status):
        def update(mainlist):
            print 'Downloading of the library took {0:.3f} seconds'.format(time.time() - start)
            self.view.emit(SIGNAL('libraryReload'), mainlist)

        start = time.time()
        self.mpdclient.send('listallinfo', callback=update)

    def setSongLabel(self, song):
        if song == EMPTY_SONG:
            label = 'Connected to %s.' % self.config.server[0]
            self.view.playerForm.songLabel.setText(label)
        else:
            title = song.title
            artist = song.artist
            album = song.album
            station = song.station
            if album == 'None':
                album = ''
            self.view.playerForm.songLabel.setText(title, artist, album, station)
            if station and station != title:
                station = 'on <i>%s</i>' % station
            else:
                station = ''
            if title:
                title = '<b><big>%s</big></b>' % title
            if artist:
                artist = 'by <big>%s</big>' % artist
            if album:
                album = 'from <i>%s</i>' % album
            label = '<br>'.join((item for item in (title, artist, album, station) if item))
        icon = song.iconPath or self.view.appIcon
        self.view.trayIcon.setToolTip(icon, label)
        if self.config.showNotification and self.state != 'stop':
            if not self.dbusNotification:
                self._setupNotifications()
            try:
                self.showNotification(icon, label)
            except:
                self.dbusNotification = None

    def showNotification(self, icon, label):
        self.notificationHints.update({'image_path': icon})
        # Show notification
        self.notificationId = self.dbusNotification.Notify(
            self.appName,                           #app_name
            self.notificationId,                    #replaces_id
            self.view.appIcon,                      #app_icon
            self.notificationSummary,               #summary
            label,                                  #body
            [''],                                   #actions
            self.notificationHints,                 #hints
            self.config.notificationTimeout * 1000) #timeout

    def setProgress(self, cs, ss=None):
        ''' Moves the progress indicator to the correct position,
            calculate the timestamps and puts them in place.
        '''
        if ss is None:
            ss = self.view.playerForm.progress.maximum()
        curTime = int(cs)
        songTime = int(ss)
        if songTime <= 0:
            self.view.playerForm.progress.setValue(0)
            self.view.playerForm.progress.setFormat(auxilia.formatTime(curTime))
        else:
            self.view.playerForm.progress.setMaximum(songTime)
            self.view.playerForm.progress.setValue(curTime)
            self.view.playerForm.progress.setFormat('/'.join((auxilia.formatTime(curTime), auxilia.formatTime(songTime))))
        self.time = curTime

    def _setupNotifications(self):
        try:
            import dbus
        except ImportError, e:
            self.config.showNotification = False
            return
        self.notificationId = dbus.UInt32(0)
        self.appName = unicode(QApplication.applicationName().toUtf8())
        # app_icon url is correct, doesn't display in Plasma though
        self.notificationSummary = '%s, now playing:' % self.appName
        self.notificationHints = dbus.Dictionary(
            {'suppress-sound':  True,
             'desktop-entry':   'pythagora',
             'image_path':      ''},
            'sv')
        try:
            self.dbusNotification = dbus.SessionBus().get_object(
                'org.freedesktop.Notifications',
                '/org/freedesktop/Notifications',
                'org.freedesktop.Notifications')
        except dbus.DBusException, e:
            self.config.showNotification = False
            print 'debug: error using dbus - %s' % e

    def __setPlayerState(self,state):
        if state == 'play':
            self.view.playerForm.play.setIcon(self.pauseIcon)
        else:
            self.view.playerForm.play.setIcon(self.startIcon)
        self.view.trayIcon.setState(state)
        self.state = state
        self.playControls.state = self.state


if __name__ == "__main__":
    for opt in sys.argv:
        if opt == "-h" or opt.startswith("--help"):
            import usage
            print usage.usage
            if opt == "--help-qt":
                print usage.qtOptions
            sys.exit(0)
    import WriteOut
    # silence pyflakes.
    WriteOut.Quiet()

    main()
#    import cProfile
#    cProfile.run('main()')


#!/usr/bin/python -OO
# -*- coding: utf-8 -*
#-------------------------------------------------------------------------------
# Copyright 2009 E. A. Graham Jr. <txcrackers@gmail.com>.
# Copyright 2010 B. Kroon <bart@tarmack.eu>.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
from PyQt4.QtCore import QTimer, SIGNAL, Qt
from PyQt4.QtGui import QApplication, QWidget, QKeySequence

import sys
import signal

import mpdthreaded as mpd
import playControls
import configuration
import MainWindow
import mpdlibrary
from models import ModelManager

def main():
    print 'debug:', sys.argv
    if MainWindow.KDE:
        from PyKDE4.kdecore import ki18n, KCmdLineArgs, KAboutData, KCmdLineOptions
        from PyKDE4.kdeui import KApplication
        appName     = "Pythagora"
        catalog     = ""
        programName = ki18n("Pythagora")
        version     = "0.0"
        description = ki18n("KDE/Qt client for MPD (Music Player Daemon.")
        license     = KAboutData.License_Custom
        copyright   = ki18n("(c) 2010 Bart Kroon <bart@tarmack.eu>")
        text        = ki18n("none")
        homePage    = "http://www.tarmack.eu/pythagora"
        bugEmail    = "bugs.pythagora@tarmack.eu"

        aboutData = KAboutData(appName, catalog, programName, version,
                description, license, copyright, text, homePage, bugEmail)
        aboutData.setLicenseText(ki18n('Apache License, Version 2.0'))

        KCmdLineArgs.init(sys.argv, aboutData)

        options = KCmdLineOptions()
        options.add('h').add('help', ki18n('Show help about options'))
        options.add('help-qt' , ki18n('Show Qt specific options'))
        options.add('i').add('iconified' , ki18n('Don\'t show the main window when started'))
        options.add('V').add('verbose' , ki18n('Make some noise'))
        options.add('d').add('debug' , ki18n('Make a lot of noise'))
        options.add('q').add('quiet' , ki18n('Don\'t print anything'))
        options.add('nokde' , ki18n('Don\'t even try to import any KDE module'))
        KCmdLineArgs.addCmdLineOptions(options)

        app = KApplication()
    else:
        app = QApplication(sys.argv)
        app.setApplicationName("Pythagora")
    app.setOrganizationName("Tarmack SW")
    app.setKeyboardInputInterval(1600)
    view = Manager(app)
    signal.signal(signal.SIGINT, view.keyboardInterrupt)
    exit = app.exec_()
    sys.exit(exit)

#===============================================================================
# Creates and links up the management display items.
#===============================================================================
class Manager():
    '''Creates and links up the management display items.'''
    oldVolume = 0
    misses = 0

    def __init__(self, app):
        self.app = app
        self.library = mpdlibrary.Library()
        self.mpdclient = mpd.MPDClient()
        self.idleTimer = QTimer()
        self.idleTimer.setSingleShot(True)
        self.config = configuration.Configuration(sys.argv)
        self.modelManager = ModelManager(self.mpdclient, self.library, self.config)
        self.view = MainWindow.View(self.modelManager, self.config, self.mpdclient, self.library, app)
        self.playControls = playControls.PlayControls(self.mpdclient)
        self.__connectSignals()
        self.__connectMPD()
        # Load the plugin forms.
        self.view.createPluginViews()

        # Set global shortcuts if KDE is available otherwise overload keyPressEvent.
        if self.config.KDE:
            from PyKDE4.kdeui import KActionCollection
            self.actionCollection = KActionCollection(self.view)
            self.setGlobalShortcuts()
        else:
            self.view.keyPressEvent = self.KeyPressEvent

        # Show the main window to make sure all geometries are calculated.
        self.view.show()
        if ('-i' in sys.argv or '--iconified' in sys.argv):
            # When asked to start iconified hide the window again. It will
            # never show because the main loop doesn't run before it is hidden
            # again.
            self.view.hide()

    def connectTo(self, action):
        name = unicode(action.text())
        name = filter(lambda x:x != '&', name)
        if self.config.server and name == self.config.server[0] and self.mpdclient.connected():
            return
        if name == 'None (disconnect)':
            self.config.server = None
        else:
            self.config.server = [name]+self.config.knownHosts[name]
        self.__connectMPD()
        self.config.save()

    def toggleOutput(self, action):
        if action.isChecked():
            self.mpdclient.send('enableoutput', (action.outputid,))
        else:
            self.mpdclient.send('disableoutput', (action.outputid,))

    def callback(self, changes):
        '''Remember, this is executed from another thread.'''
        print 'debug: called back with "%s"' % changes
        if self.view.shuttingDown:
            print 'debug: callback aborted, application is closing down.'
            return
        if isinstance(changes, Exception):
            print 'debug: idle callback - got exception: ', changes
            self.view.emit(SIGNAL('ConnectionError()'))
        else:
            self.modelManager.processChanges(changes)
        # The slots will be executed asynchronously so we use a timer to
        # schedule the next idle call after all events have been processed.
        if self.idleTimer.timerId() < 0:
            self.idleTimer.start()

    def KeyPressEvent(self, event):
        print 'keyEvent main'
        if event.modifiers() == Qt.ControlModifier:
            if event.key() == Qt.Key_MediaPlay:
                self.playControls.playPause()
            elif event.key() == Qt.Key_MediaStop:
                self.playControls.stop()
            elif event.key() == Qt.Key_MediaPrevious:
                self.playControls.back()
            elif event.key() == Qt.Key_MediaNext:
                self.playControls.forward()
            elif event.key() == Qt.Key_VolumeUp:
                self.playControls.volumeUp()
            elif event.key() == Qt.Key_VolumeDown:
                self.playControls.volumeDown()
            elif event.key() == Qt.Key_VolumeMute:
                self.playControls.toggleMute()
            else:
                print 'keyEvent main ignored'
                QWidget.keyPressEvent(self.view, event)
        else: QWidget.keyPressEvent(self.view, event)

    def setGlobalShortcuts(self):
        self.playAction = self.__setGlobalShortcut(
                "Play/Pause", "Play/pause", Qt.CTRL + Qt.Key_MediaPlay, self.playControls.playPause)
        self.stopAction = self.__setGlobalShortcut(
                "Stop", "Stop playing", Qt.CTRL + Qt.Key_MediaStop, self.playControls.stop)
        self.backAction = self.__setGlobalShortcut(
                "Back", "Play previous song", Qt.CTRL + Qt.Key_MediaPrevious, self.playControls.back)
        self.forwardAction = self.__setGlobalShortcut(
                "Forward", "Play next song", Qt.CTRL + Qt.Key_MediaNext, self.playControls.forward)
        self.volumeUpAction = self.__setGlobalShortcut(
                "Volume Up", "Volume up", Qt.CTRL + Qt.Key_VolumeUp, self.playControls.volumeUp)
        self.volumeDownAction = self.__setGlobalShortcut(
                "Volume Down", "Volume down", Qt.CTRL + Qt.Key_VolumeDown, self.playControls.volumeDown)
        self.muteAction = self.__setGlobalShortcut(
                "Mute", "Mute/unmute", Qt.CTRL + Qt.Key_VolumeMute, self.playControls.toggleMute)
        self.hideRestoreAction = self.__setGlobalShortcut(
                "Hide/Restore", "Hide or Restore the main window.", Qt.CTRL + Qt.SHIFT + Qt.Key_P, self.view.toggleHideRestore)

    def __setGlobalShortcut(self, name, helpText, keys, connectTo):
        print 'debug: Registering global shortcut for %s as %s.' % (name, str(keys))
        action = self.actionCollection.addAction(name, self.view)
        action.setHelpText(helpText)
        short = action.shortcut()
        short.setPrimary(QKeySequence(keys))
        action.setShortcut(short)
        action.setGlobalShortcut(short)
        self.view.connect(action, SIGNAL("triggered()"), connectTo)
        return action


    def __connectMPD(self, error=False):
        if self.view.shuttingDown:
            return True
        self.modelManager.clearForms()
        self.library.reload([])
        server = self.config.server
        if not server:
            self.view.serverLabel.setText('Not connected')
            if self.mpdclient.connected():
                self.mpdclient.disconnect()
            if self.config.firstTime:
                self.config.showConfiguration(self.view, True)
        else:
            self.view.setCursor(Qt.WaitCursor)
            self.view.serverLabel.setText('Connecting to %s' % server[0])
            self.mpdclient.connect(server[1], int(server[2]), callback=
                    lambda exc: self.view.emit(SIGNAL('connectionTry'), exc))

    def __connectionTry(self, exc):
        print 'debug: tried to connect again :$'
        self.view.emit(SIGNAL('clearForms'))
        if isinstance(exc, Exception):
            self.update.setSongLabel('Could not connect to %s at %s.' % (self.config.server[0], self.config.server[1]))
            self.view.serverLabel.setText('Not connected')
            self.update.currentsong = mpdlibrary.Song({}, self.update.library)
            self.misses += 1
            self.misses = min(30, self.misses)
            self.idleTimer.start(3000*self.misses)
            if self.config.firstTime:
                self.config.firstTime = False
                self.config.showConfiguration(self.view, True)
        else:
            self.misses = 0
            self.errorCount = 0
            self.idleTimer.setInterval(0)
            if len(self.config.server) > 3 and self.config.server[3] != '':
                self.mpdclient.send('password', (self.config.server[3],))
            self.view.serverLabel.setText('Connected to %s' % self.config.server[0])
            self.callback(['mixer', 'options', 'player', 'playlist', 'stored_playlist'])
            self.modelManager.reloadLibrary()
        self.view.setCursor(Qt.ArrowCursor)
        self.config.firstTime = False


    def _error(self):
        print 'error: Lost connection to mpd server.'
        if self.config.server:
            self.__connectMPD(True)

    def __runIdle(self):
        print 'debug: requesting idle.'
        if not self.view.shuttingDown:
            if self.mpdclient.connected():
                self.mpdclient.send('idle', ([], 10), self.callback)
            else:
                self.view.emit(SIGNAL('ConnectionError()'))

    def __connectSignals(self):
        self.playControls.connectSignals(self.view)
        self.view.connect(self.view.menuConnect, SIGNAL('triggered(QAction *)'), self.connectTo)
        self.view.connect(self.view.menuOutputs, SIGNAL('triggered(QAction *)'), self.toggleOutput)

        self.view.connect(self.idleTimer, SIGNAL("timeout()"), self.__runIdle)
        self.view.connect(self.view, SIGNAL('reconnect()'), self.__connectMPD)
        self.view.connect(self.view, SIGNAL('ConnectionError()'), self._error)
        self.view.connect(self.view, SIGNAL('connectionTry'), self.__connectionTry)

    def keyboardInterrupt(self, signum, frame):
        print 'debug: KeyboardInterrupt'
        try:
            self.app.quit()
        except:
            sys.exit(1)


if __name__ == "__main__":
    for opt in sys.argv:
        if opt == "-h" or opt.startswith("--help"):
            import usage
            print usage.usage
            if opt == "--help-qt":
                print usage.qtOptions
            sys.exit(0)
    import WriteOut
    # silence pyflakes.
    WriteOut.Quiet()

    main()
#    import cProfile
#    cProfile.run('main()')

